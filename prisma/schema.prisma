generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        Int      @id @default(autoincrement())
  fullName  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  birthday  String?
  email     String?
  address   String?
  phone     String?
  sex       String?
  password  String
  roleId    Int      @default(3)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cart      Cart[]
  order    Order[]

  image Image?

  @@unique([id])
  @@map(name: "account")
}

model Image {
  id        Int      @id @default(autoincrement())
  url       Json?
  productId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account   Account? @relation(fields: [accountId], references: [id])
  accountId Int?     @unique
  Product   Product? @relation(fields: [productId], references: [id])

  @@map(name: "image")
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String?
  createdAt DateTime  @default(now())
  updateAt  DateTime  @default(now())
  account   Account[]

  @@map(name: "role")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String?
  description String?
  price       Int?
  images      Image[]
  cart        Cart[]
  stock       Int?
  createdAt   DateTime @default(now())
  updateAt    DateTime @default(now())

  @@map(name: "product")
}

model Cart {
  id        Int      @id @default(autoincrement())
  quantity  Int?
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int
  account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId Int?
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
  order     Order[]
  status    Status?  @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  statusId  Int?     @default(4)

  @@map(name: "cart")
}

model Order {
  id        Int      @id @default(autoincrement())
  cart      Cart?    @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
  cartId    Int?
  accountId Int?
  status    Status?  @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  statusId  Int?     @default(1)
  fullName  String?
  email     String?
  phone     String?
  address   String?
  note      String?
  type      String?
  @@map(name: "order")
}

model Status {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
  Order     Order[]
  Cart      Cart[]

  @@map(name: "status")
}
